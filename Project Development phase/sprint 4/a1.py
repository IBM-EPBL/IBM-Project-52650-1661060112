# -*- coding: utf-8 -*-
"""sending_Alert.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_l_A9yRkDcbizU0LD2xjCdhpwDbWWKcF
"""

import keras

#pip install twilio



from matplotlib import pyplot as plt
from keras.preprocessing.image import ImageDataGenerator

train_datagen=ImageDataGenerator(rescale=1./255,shear_range=0.2,rotation_range=180,zoom_range=0.2,horizontal_flip=True)
test_datagen=ImageDataGenerator(rescale=1./255,shear_range=0.2,rotation_range=180,zoom_range=0.2,horizontal_flip=True)

x_train=train_datagen.flow_from_directory("C:\\Users\\BARANIDHARAN\\Desktop\\dataset\\Dataset\\Dataset\\train_set" ,target_size=(64,64),batch_size=32,class_mode='binary')

x_test=test_datagen.flow_from_directory("C:\\Users\\BARANIDHARAN\\Desktop\\dataset\\Dataset\\Dataset\\train_set",target_size=(64,64),batch_size=32,class_mode='binary')

#to define the linear Initialisation import sequential
from keras.models import Sequential
#to add layers import Dense
from keras.layers import Dense
#to create Convolutional kernel import convolution2D
from keras.layers import Convolution2D
#import Maxpooling layer 
from keras.layers import MaxPooling2D
#import flatten layer
from keras.layers import Flatten
import warnings
warnings.filterwarnings('ignore')

model = Sequential()
model.add(Convolution2D(32,(3,3),input_shape=(64,64,3),activation='relu'))
#add maxpooling layers
model.add(MaxPooling2D(pool_size=(2,2)))
#add faltten layer
model.add(Flatten())
#add hidden layers
model.add(Dense(150,activation='relu'))
#add output layer
model.add(Dense(1,activation='sigmoid'))
model.compile(loss='binary_crossentropy',optimizer="adam",metrics=["accuracy"])
#model.fit_generator(x_train,steps_per_epoch=14,epochs=10,validation_data=x_test,validation_steps=4)

model.save("forest.h5")

#import load model from keras.model
from keras.models import load_model
#import image from keras
from tensorflow.keras.preprocessing import image
import numpy as np
#import cv2
import cv2
#load the saved model
model=load_model("forest.h5")
img=image.load_img('forest.jpg')
plt.imshow(img)
plt.show()
x=image.img_to_array(img)
res=cv2.resize(x,dsize=(64,64),interpolation=cv2.INTER_CUBIC)
#expand the image shape
x=np.expand_dims(res,axis=0)

pred=model.predict(x)
pred = int(pred[0][0])
pred
int(pred)

if pred==1:
  print('Forest fire')
  from twilio.rest import Client
  print('Forest fire')
  account_sid='ACae95ea785737954a0a96c91f64101221'
  auth_token='0d013e13203434b42e0916c191b9fc6f'
  client=Client(account_sid,auth_token)
  message=client.messages \
  .create(
      body='forest fire is detected,stay alert',
      #use twilio free number
      from_='+18588081954',
      #to number
      to='+918248133285')
  print(message.sid)
  print("Fire detected")
  print("SMS Sent!")
elif pred==0:
  print('No Fire')
